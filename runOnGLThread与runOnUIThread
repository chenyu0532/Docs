主要是lua与java的相互调用：利用廖大的LuaJavaBridge（简称 luaj）

形式一：
lua调用java
如：
	local args = {
	  	  idStr,  --string 一般传计费点--可省
          true,   --bool  useSms --可省
          true,   --bool  isRepeated--可省
          callback --int luaFunctionId--可省
	};
	local sig = "(Ljava/lang/String;)V";
	luaj.callStaticMethod(className,"startBuySkin",args,sig);
  
  其中的args sig都是可选参数
  sig可以是I(整数) F(浮点数) Z(布尔值) Ljava/lang/String;(字符串) V(空,用来表示java函数无返回值)
  className:类名，指的是函数要放在java中的哪个类里
  "startBuySkin":java里的具体函数
  
 java调lua:
    public static void showYumiAd(final String id)
    sdk中一般都会有调用的回调函数,如成功或失败或其他,在回调函数里使用
    Cocos2dxLuaJavaBridge.callLuaGlobalFunctionWithString("回调到lua里的函数", "所携带的信息string,可以为空");
 
 形式二:
 lua调java:
	local idStr = tostring(id);
	local javaMethodName = "showYumiAd"
	local javaParams = {
    	idStr,
    	function(event)--接受来自java端的回调
			print("当前返回消息播放广告结束")
	 		G_DISPATCHER:dispatch("playMediaSuccess") 
    	end
	}
	local javaMethodSig = "(Ljava/lang/String;I)V"
	luaj.callStaticMethod(className, javaMethodName, javaParams, javaMethodSig)

本质跟形式一一样，只不过换了种写法,javaParams中的function是接受java端的函数

java调lua
	showYumiAd(final String id, final int luaCallBack)
	aD_lua_call_back_func = luaCallBack
	
	Cocos2dxLuaJavaBridge.callLuaFunctionWithString(aD_lua_call_back_func, "回到的参数值");
	Cocos2dxLuaJavaBridge.releaseLuaFunction(aD_lua_call_back_func);
 
 重点注意：
    由于cocos2d-x在android是运行在多线程下的，GL线程负责渲染  UI线程是负责用户界面，所以要特别注意选择适当的线程
    lua调java时:如果涉及到UI层面的操作，则要在UI线程下，
    instance.runOnUiThread(new Runnable() {
      @Override
        public void run() {
      }
      });
    java调lua时:需要在GL线程下
    instance.runOnGLThread(new Runnable() {
       @Override
       public void run() {
       }
    );

